name: Gradle CI (new)

on:
  push:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
      - '.editorconfig'
      - 'changelog.md'
      - 'mod-comparison.md'
  pull_request:

jobs:
  retrieve-targets:
    runs-on: ubuntu-latest
    name: Retrieve targets

    outputs:
      targets: ${{ steps.get-targets.outputs.targets }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get potential versions
        id: get-targets
        run: |
          TARGETS=$(jq -c '[.builds | to_entries[] | .value.platforms[] as $platform | "\(.key)-\($platform)"]' ./versions/builds.json)
          echo "targets=$TARGETS" >> $GITHUB_OUTPUT
        working-directory: versions

  build:
    needs: retrieve-targets
    runs-on: ubuntu-latest
    name: Build with gradle

    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.retrieve-targets.outputs.targets) }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
      - name: Setup gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false
      - name: Build ${{ matrix.target }}
        run: ./gradlew "Refresh active project" buildAndCollectActive --stacktrace
        env:
          CI_SINGLE_BUILD: ${{ matrix.target }}
      - uses: actions/upload-artifact@v4
        with:
          path: build/finalJars/*.jar
          name: ${{ matrix.target }}

#  run:
#    needs: build
#    runs-on: ubuntu-latest
#    name: Run Minecraft
#
#    strategy:
#      matrix:
#        target: ${{ fromJson(needs.retrieve-targets.outputs.targets) }}
